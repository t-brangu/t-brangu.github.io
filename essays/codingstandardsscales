---
layout: essay
type: essay
title: "Musical Coding Scales"
date: 2025-09-25
published: true
labels:
  - Coding Standard
  - ESLint
  - Software Engineering
---

## Scales, Coding, and Syntax
Following my first week of using ESLint in VSCode, I've slowly started to see the similarities in how learning coding standards is like learning musical scales. At first, scales might feel trivial and mind-numbing because they're like finger exercises that never seem to stop; simple patterns up, down, up, down. But the more you practice them, the more you realize they're the foundation for everything else like melodies, chords, improvisation. In the same way, coding standards might seem at first like they're only about indentation, spacing, or where to put curly braces. But after many many reminders and messages from ESLint telling me what's wrong with my code's formatting, I began to see how these small conventions create a structure that could make learning, reading, and writing code in other languages easier.
<br>

One comparison that I thought of was how learning scales prepares you for playing in other key signatures. For those who don't know much about music, all forms of music like songs or melodies follow different key signatures. They serve as a way to communicate information about a piece's scale and structure, allowing musicians to understand how a piece may sound without having to make exceptions for every single note. For example, once you've practiced a G major scale enough, recognizing the one sharp it has, the F#, allows you to instantly know whether a piece is currently being played in G major. The same can apply for coding standards. When I learn to consistently write functions with clear spacing, meaningful variable names, and predicatable formatting, I'm not just make my code look nice, but instead I'm training my muscle memory to see patterns that carry over to other programming "key signatures". Whether it's JavaScript, TypeScript, Java, or even C, like a musician is able to quickly adapt to new keys after mastering the scales, I feel that learning other progamming languages becomes easier once coding standards become second nature.

<img width="500px" class="rounded float-start pe-4" src="../img/autocomplete.png"> 

## Reality checking
Of course, this first week using ESLint hasn't been without its moments of frustration. Sometimes I feel like I'm being "graded" for every tiny detail like accidentally forgetting a semicolon or not spacing a function call properly (seriously, are the 2 extra indents I have that bad...). At times it feels nitpicky, even painful, to fix error after error, especially under time pressure. But in another sense, it reminds me of practicing with a metronome. It's strict, it forces you to slow down and repeat until you get it right, but in the long run it build discipline and accuracy. Eventually, and I say hopefully, the patterns stick and become automatic, allowing me to focus on the bigger picture: the music, or in this case, the logic of the program itself. 

Coding standards, in my opinion, are far from trivial. They're a form of practice, like scales, that not only help you play cleanly in the present, but also prepare you to perform in new environments later on. Just as a musician can move from one key to another more confidently after hours of drilling scales, I believe software engineers can move between languages and projects more smoothly if they internalize solid coding standards. ESLint, annoying as it may sometimes feel, is like that music teacher who never lets you play sloppy. At the moment, it's slowing me down, but I know it's helping me develop habits that will pay off when I'm sight-reading" in new programming languages.

As musicians often say, practice makes perfect, and coding standards are that practice. They're not some form of arbitrary rules but instead scales that make better programming possible.

<img height="500px" width="500px" src="../img/martha.png">
    
